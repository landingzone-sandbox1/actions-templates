name: Deployment IaC Terraform Generic

on:
  workflow_call:
    inputs:
      environment: { description: "Environment", required: true, type: string }
      destroy: { type: boolean, required: false, default: false }
      multiple_variable: { type: boolean, required: false, default: false }
      backend_storage_account_name: { description: "Backend Storage Account Name", required: true, type: string }
      backend_container_name: { description: "Backend Container Name", required: false, type: string }
      backend_resource_group_name: { description: "Backend Resource Group Name", required: false, type: string }
      backend_path: { description: "Backend Path to the state file", required: false, type: string }
      tfvars_directory: { description: "Directory Name Into tfvars File", required: false, default: "workspaces", type: string }
      project_name_directory: { description: "Project Name Directory", required: false, default: ".", type: string }
      is_named_value_key_vault: { description: "Validate if is Named Value Key Vault Secret", required: false, default: false, type: boolean }
      AZURE_TENANT_ID: { required: true, type: string }
      AZURE_SUBSCRIPTION_ID: { required: true, type: string }
      LOGIN_TO_AZURE: { description: "Validate if it is necessary to log in to azure", required: false, default: false, type: boolean }
      USE_RUNNER_SELF_HOSTED: { description: "Use runner self hosted", required: false, default: false, type: boolean }
      TF_VAR_AZURE_TENANT_ID: { required: false, type: string }
      created_subscription: { required: false, type: boolean, default: false }
      plan_only: { type: boolean, required: false, default: false }
    secrets:
      GH_REPOSITORY_TOKEN: { required: true }
      AZURE_CLIENT_ID: { required: true }
      AZURE_CLIENT_SECRET: { required: true }
      ARM_ACCESS_KEY: { required: true }
      GH_APP_ID: { required: false }
      GH_APP_INSTALLATION_ID: { required: false }
      GH_APP_PEM_FILE: { required: false }
      TF_VAR_AZURE_CLIENT_ID: { required: false }
      TF_VAR_AZURE_CLIENT_SECRET: { required: false }

jobs:
  set-backend-path:
    name: Set Backend Path
    runs-on: ubuntu-latest
    env:
      REPO_NAME: ${{ github.event.repository.name }}
    outputs:
      backend_path: ${{ steps.set-path.outputs.backend_path }}
      backend_resource_group_name: ${{ steps.set-backend-resource-group.outputs.backend_resource_group_name }}
      backend_container_name: ${{ steps.set-backend-resource-group.outputs.backend_container_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Calcula el key del tfstate. SOLO acepta fuentes https://github.com/
      # Fallback: azure/resource-groups/<repo>.tfstate si no puede inferir el m√≥dulo.
      - name: Set Backend Path
        id: set-path
        shell: bash
        env:
          PROJECT_DIR: ${{ inputs.project_name_directory }}
          DEFAULT_PREFIX: azure/resource-groups/
        run: |
          python3 - <<'PY'
          import os, re, sys, pathlib
          proj = os.environ.get("PROJECT_DIR",".")
          tf = pathlib.Path(proj)/"main.tf"
          current_repo = (os.getenv("GITHUB_REPOSITORY","").split("/")[-1]
                          or os.getenv("REPO_NAME","repo"))
          backend_path = f'{os.environ.get("DEFAULT_PREFIX","azure/resource-groups/")}{current_repo}.tfstate'

          if tf.exists():
              content = tf.read_text(encoding="utf-8")
              m = re.search(
                  r'source\s*=\s*"(?:git::)?https://github\.com/[^/]+/([^"/\?]+)(?:\.git)?(?:\?ref=[^"]+)?"',
                  content
              )
              if m:
                  repo_src = m.group(1)                 # ej: iac-mod-az-resource-group
                  key = repo_src.replace("iac-","")     # -> mod-az-resource-group
                  mapping = {
                    "mod-az-resource-group": "azure/resource-groups/",
                    "mod-az-key-vault":      "azure/key-vaults/",
                    "mod-az-storage-account":"azure/storage-accounts/",
                    "mod-az-log-analytics":  "azure/log-analytics/",
                  }
                  prefix = mapping.get(key)
                  if prefix:
                      backend_path = f"{prefix}{current_repo}.tfstate"

          with open(os.environ["GITHUB_OUTPUT"],"a") as f:
              f.write(f"backend_path={backend_path}\n")
          print(f"backend_path={backend_path}")
          PY

      - name: Set Backend Resource Group Name
        id: set-backend-resource-group
        shell: bash
        run: |
          rg="${{ inputs.backend_resource_group_name }}"
          ct="${{ inputs.backend_container_name }}"
          if [ -z "$rg" ] || [ -z "$ct" ]; then
            case "${{ inputs.environment }}" in
              development)   rg="rg-tfstates-dev";        ct="tfstate" ;;
              certification) rg="RSGRUS2TFCertification"; ct="ctstfstcrt" ;;
              production)    rg="RSGRUS2TFProduction";    ct="ctstfstprd" ;;
              infrastructure)rg="RSGRUS2TFProduction";    ct="ctstfstinfra" ;;
              *) echo "::error::Invalid environment: ${{ inputs.environment }}"; exit 1 ;;
            esac
          fi
          echo "backend_resource_group_name=$rg" >> "$GITHUB_OUTPUT"
          echo "backend_container_name=$ct" >> "$GITHUB_OUTPUT"

      - name: Show outputs (debug)
        run: |
          echo "backend_path=${{ steps.set-path.outputs.backend_path }}"
          echo "backend_resource_group_name=${{ steps.set-backend-resource-group.outputs.backend_resource_group_name }}"
          echo "backend_container_name=${{ steps.set-backend-resource-group.outputs.backend_container_name }}"

  plan:
    name: Plan
    uses: "landingzone-sandbox1/actions-templates/.github/workflows/iac-tf-plan.yml@main"
    needs: [set-backend-path]
    with:
      environment: ${{ inputs.environment }}
      destroy: ${{ inputs.destroy }}
      multiple_variable: ${{ inputs.multiple_variable }}
      backend_storage_account_name: ${{ inputs.backend_storage_account_name }}
      backend_container_name: ${{ needs.set-backend-path.outputs.backend_container_name }}
      backend_resource_group_name: ${{ needs.set-backend-path.outputs.backend_resource_group_name }}
      backend_path: ${{ needs.set-backend-path.outputs.backend_path }}
      tfvars_directory: ${{ inputs.tfvars_directory }}
      project_name_directory: ${{ inputs.project_name_directory }}
      AZURE_TENANT_ID: ${{ inputs.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
      is_named_value_key_vault: ${{ inputs.is_named_value_key_vault }}
      LOGIN_TO_AZURE: ${{ inputs.LOGIN_TO_AZURE }}
      USE_RUNNER_SELF_HOSTED: ${{ inputs.USE_RUNNER_SELF_HOSTED }}
      TF_VAR_AZURE_TENANT_ID: ${{ inputs.AZURE_TENANT_ID }}
      created_subscription: ${{ inputs.created_subscription }}
    secrets:
      GH_REPOSITORY_TOKEN: ${{ secrets.GH_REPOSITORY_TOKEN }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      TF_VAR_AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

  apply:
    if: ${{ inputs.plan_only == false }}
    name: Apply
    uses: "landingzone-sandbox1/actions-templates/.github/workflows/iac-tf-apply.yml@main"
    needs: [plan, set-backend-path]
    with:
      environment: ${{ inputs.environment }}
      destroy: ${{ inputs.destroy }}
      multiple_variable: ${{ inputs.multiple_variable }}
      backend_storage_account_name: ${{ inputs.backend_storage_account_name }}
      backend_container_name: ${{ needs.set-backend-path.outputs.backend_container_name }}
      backend_resource_group_name: ${{ needs.set-backend-path.outputs.backend_resource_group_name }}
      backend_path: ${{ needs.set-backend-path.outputs.backend_path }}
      tfvars_directory: ${{ inputs.tfvars_directory }}
      project_name_directory: ${{ inputs.project_name_directory }}
      AZURE_TENANT_ID: ${{ inputs.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
      is_named_value_key_vault: ${{ inputs.is_named_value_key_vault }}
      LOGIN_TO_AZURE: ${{ inputs.LOGIN_TO_AZURE }}
      USE_RUNNER_SELF_HOSTED: ${{ inputs.USE_RUNNER_SELF_HOSTED }}
      TF_VAR_AZURE_TENANT_ID: ${{ inputs.AZURE_TENANT_ID }}
      created_subscription: ${{ inputs.created_subscription }}
    secrets:
      GH_REPOSITORY_TOKEN: ${{ secrets.GH_REPOSITORY_TOKEN }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      TF_VAR_AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
