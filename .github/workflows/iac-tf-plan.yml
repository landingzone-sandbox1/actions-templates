name: IaC Terraform Plan
on:
  workflow_call:
    inputs:
      environment: { description: "Environment", required: true, type: string }
      destroy: { type: boolean, required: false, default: false }
      multiple_variable: { type: boolean, required: false, default: false }
      backend_storage_account_name: { description: "Backend Storage Account Name", required: true, type: string }
      backend_container_name: { description: "Backend Container Name", required: false, default: "pending", type: string }
      backend_resource_group_name: { description: "Backend Resource Group Name", required: false, default: "pending", type: string }
      backend_path: { description: "Backend Path to the state file", required: true, type: string }
      tfvars_directory: { description: "Directory Name Into tfvars File", required: false, default: "workspaces", type: string }
      project_name_directory: { description: "Project Name Directory", required: false, default: ".", type: string }
      is_named_value_key_vault: { description: "Validate if is Named Value Key Vault Secret", required: false, default: false, type: boolean }
      AZURE_TENANT_ID: { required: true, type: string }
      AZURE_SUBSCRIPTION_ID: { required: true, type: string }
      LOGIN_TO_AZURE: { description: "Validate if it is necessary to log in to azure", required: false, default: false, type: boolean }
      USE_RUNNER_SELF_HOSTED: { description: "Use runner self hosted", required: false, default: false, type: boolean }
      TF_VAR_AZURE_TENANT_ID: { required: false, type: string }
      created_subscription: { required: false, type: boolean, default: false }
    secrets:
      GH_REPOSITORY_TOKEN: { required: true }
      AZURE_CLIENT_ID: { required: true }
      AZURE_CLIENT_SECRET: { required: true }
      ARM_ACCESS_KEY: { required: true }
      TF_VAR_AZURE_CLIENT_ID: { required: false }
      TF_VAR_AZURE_CLIENT_SECRET: { required: false }

jobs:
  validation:
    runs-on: ubuntu-latest
    steps:
      - name: Validate if it is necessary to log in to azure
        id: step2
        run: |
          if [ "${{ inputs.LOGIN_TO_AZURE }}" = true ]; then
            echo "LOGIN_TO_AZURE=yes" >> "$GITHUB_OUTPUT"
          else
            echo "LOGIN_TO_AZURE=no" >> "$GITHUB_OUTPUT"
          fi
    outputs:
      LOGIN_TO_AZURE: ${{ steps.step2.outputs.LOGIN_TO_AZURE }}

  plan:
    name: Plan
    runs-on: ubuntu-latest
    needs: [validation]
    container:
      image: hashicorp/terraform:1.9.6
      options: --user root
    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET:   ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID:       ${{ inputs.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ inputs.AZURE_SUBSCRIPTION_ID }}
      ARM_ACCESS_KEY:      ${{ secrets.ARM_ACCESS_KEY }}
      TF_PLUGIN_CACHE_DIR: ./.terraform.d/plugin-cache
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Usar PAT para clonar módulos privados por HTTPS
      - name: Git Config (PAT over HTTPS)
        run: |
          git config --global url."https://${{ secrets.GH_REPOSITORY_TOKEN }}:@github.com/".insteadOf "https://github.com/"
          git config --global url."https://${{ secrets.GH_REPOSITORY_TOKEN }}:x-oauth-basic@github.com/".insteadOf "ssh://git@github.com/"

      - name: Create plugin cache dir
        run: mkdir -p "$TF_PLUGIN_CACHE_DIR"

      # 1) Init sin backend -> descarga providers y módulos (para validar)
      - name: Terraform Init (providers only, no backend)
        working-directory: ${{ inputs.project_name_directory }}
        run: terraform init -input=false -backend=false -upgrade

      - name: Terraform Validate
        working-directory: ${{ inputs.project_name_directory }}
        run: terraform validate -no-color

      # 2) Init con backend -> prepara el state remoto
      - name: Terraform Init (backend)
        working-directory: ${{ inputs.project_name_directory }}
        run: |
          terraform init -input=false \
            -backend-config="storage_account_name=${{ inputs.backend_storage_account_name }}" \
            -backend-config="container_name=${{ inputs.backend_container_name }}" \
            -backend-config="resource_group_name=${{ inputs.backend_resource_group_name }}" \
            -backend-config="key=${{ inputs.backend_path }}"

      # 3) Plan (elige ruta múltiple o simple)
      - name: Terraform Plan Apply with Multiple Variable Files
        if: ${{ !inputs.destroy && inputs.multiple_variable }}
        working-directory: ${{ inputs.project_name_directory }}
        run: |
          terraform plan -input=false \
            -var-file="${{ inputs.tfvars_directory }}/${{ inputs.environment }}-in.tfvars" \
            -var-file="${{ inputs.tfvars_directory }}/${{ inputs.environment }}-out.tfvars"

      - name: Terraform Plan Apply with Single Variable File
        if: ${{ !inputs.destroy && !inputs.multiple_variable }}
        working-directory: ${{ inputs.project_name_directory }}
        run: |
          if [ "${{ inputs.created_subscription }}" = true ]; then
            terraform plan -input=false
          else
            terraform plan -input=false -var-file="${{ inputs.tfvars_directory }}/${{ inputs.environment }}.tfvars"
          fi
        env:
          TF_VAR_AZURE_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_AZURE_TENANT_ID:     ${{ inputs.AZURE_TENANT_ID }}

      - name: Terraform Plan Destroy with Multiple Variable Files
        if: ${{ inputs.destroy && inputs.multiple_variable }}
        working-directory: ${{ inputs.project_name_directory }}
        run: |
          terraform plan -destroy -input=false \
            -var-file="${{ inputs.tfvars_directory }}/${{ inputs.environment }}-in.tfvars" \
            -var-file="${{ inputs.tfvars_directory }}/${{ inputs.environment }}-out.tfvars"

      - name: Terraform Plan Destroy with Single Variable File
        if: ${{ inputs.destroy && !inputs.multiple_variable }}
        working-directory: ${{ inputs.project_name_directory }}
        run: |
          if [ "${{ inputs.created_subscription }}" = true ]; then
            terraform plan -destroy -input=false
          else
            terraform plan -destroy -input=false -var-file="${{ inputs.tfvars_directory }}/${{ inputs.environment }}.tfvars"
          fi
        env:
          TF_VAR_AZURE_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_AZURE_TENANT_ID:     ${{ inputs.AZURE_TENANT_ID }}

